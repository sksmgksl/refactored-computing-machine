from flask import Flask, render_template, request, redirect, url_for
from datetime import datetime, timedelta

app = Flask(__name__)

# 임시 게시글 목록 (리스트로 관리)
posts = [
    {"id": 1, "title": "버스 시간표 확인", "content": "수업 종료 후 최적의 버스를 확인하세요.", "date": "2024-12-01"},
    {"id": 2, "title": "버스 시간 업데이트", "content": "버스 시간표가 갱신되었습니다.", "date": "2024-12-02"}
]

# 시간 문자열을 datetime 객체로 변환하는 함수
def parse_time(time_str):
    return datetime.strptime(time_str, "%H:%M")

# 최적의 버스를 찾는 함수
def find_best_bus(end_time):
    end_time = parse_time(end_time)
    best_bus = None
    min_wait_time = timedelta.max

    bus_data = [
        {"id": 1, "start_time": "08:45", "interval": 110, "last_time": "21:30"},
        {"id": 14, "start_time": "09:22", "interval": 28, "last_time": "22:20"},
        {"id": 15, "start_time": "08:15", "interval": 135, "last_time": "20:40"},
        {"id": 16, "start_time": "09:15", "interval": 255, "last_time": "17:30"},
        {"id": 18, "start_time": "09:05", "interval": 225, "last_time": "17:50"},
        {"id": 31, "start_time": "09:05", "interval": 195, "last_time": "19:15"},
        {"id": 33, "start_time": "08:30", "interval": 135, "last_time": "19:15"},
        {"id": 34, "start_time": "09:10", "interval": 110, "last_time": "21:30"},
        {"id": 35, "start_time": "10:10", "interval": 200, "last_time": "21:10"},
        {"id": 51, "start_time": "11:00", "interval": 210, "last_time": "17:40"},
        {"id": 52, "start_time": "09:52", "interval": 13, "last_time": "20:30"},
        {"id": 71, "start_time": "09:48", "interval": 24, "last_time": "22:35"},
        {"id": 77, "start_time": "09:20", "interval": 10, "last_time": "21:20"},
        {"id": 94, "start_time": "10:00", "interval": 110, "last_time": "22:30"},
        {"id": 95, "start_time": "09:20", "interval": 80, "last_time": "22:00"},
        {"id": 96, "start_time": "09:00", "interval": 90, "last_time": "22:05"},
        {"id": 97, "start_time": "09:50", "interval": 140, "last_time": "20:30"},
        {"id": 98, "start_time": "08:50", "interval": 110, "last_time": "20:45"},
        {"id": 111, "start_time": "09:05", "interval": 65, "last_time": "21:05"},
    ]

    for bus in bus_data:
        start_time = parse_time(bus["start_time"])
        last_time = parse_time(bus["last_time"])
        interval = timedelta(minutes=bus["interval"])

        # 운행 시작 전인 경우
        if end_time < start_time:
            next_bus = start_time
        else:
            elapsed = (end_time - start_time).total_seconds() // interval.total_seconds()
            next_bus = start_time + (elapsed + 1) * interval

        # 운행이 종료된 경우 무시
        if next_bus > last_time:
            continue

        wait_time = next_bus - end_time
        if wait_time < min_wait_time:
            min_wait_time = wait_time
            best_bus = bus["id"]

    return best_bus, (end_time + min_wait_time).strftime("%H:%M") if best_bus else None

@app.route("/", methods=["GET", "POST"])
def index():
    bus_info = None
    if request.method == "POST":
        end_time = request.form["end_time"]
        bus_id, arrival_time = find_best_bus(end_time)
        if bus_id:
            bus_info = f"{end_time}에 종료 시: 버스 {bus_id}를 타세요. 예상 출발 시간: {arrival_time}"
        else:
            bus_info = f"{end_time}에 종료 시: 이용 가능한 버스가 없습니다."

    return render_template("index.html", bus_info=bus_info, posts=posts)

@app.route("/post/new", methods=["GET", "POST"])
def new_post():
    if request.method == "POST":
        title = request.form["title"]
        content = request.form["content"]
        date = datetime.now().strftime("%Y-%m-%d")
        new_post = {"id": len(posts) + 1, "title": title, "content": content, "date": date}
        posts.append(new_post)
        return redirect(url_for("index"))
    return render_template("new_post.html")

if __name__ == "__main__":
    app.run(debug=True)
